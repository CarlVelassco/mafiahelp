
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Мафия | Премиум Игра</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
            color: #f5f5f7;
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            padding: 20px;
            position: relative;
            overflow-x: hidden;
        }
        
        body::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at center, rgba(211, 47, 47, 0.1) 0%, transparent 70%);
            pointer-events: none;
            z-index: -1;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: rgba(18, 18, 30, 0.85);
            backdrop-filter: blur(12px);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.08);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.6);
            overflow: hidden;
            position: relative;
            padding: 20px;
        }
        
        header {
            text-align: center;
            padding: 30px 20px;
            background: linear-gradient(to right, rgba(179, 27, 27, 0.2), rgba(40, 40, 60, 0.5));
            position: relative;
            overflow: hidden;
            border-radius: 15px;
            margin-bottom: 30px;
        }
        
        h1 {
            font-size: 3.5rem;
            text-transform: uppercase;
            letter-spacing: 3px;
            margin: 0;
            background: linear-gradient(to right, #ff9800, #d32f2f);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 15px rgba(211, 47, 47, 0.3);
            font-weight: 800;
            position: relative;
            display: inline-block;
        }
        
        h1::after {
            content: "";
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 150px;
            height: 4px;
            background: linear-gradient(to right, #ff9800, #d32f2f);
            border-radius: 2px;
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.8;
            margin-top: 15px;
            letter-spacing: 1px;
            color: #aaa;
        }
        
        .game-setup {
            padding: 20px;
            position: relative;
            background: rgba(30, 30, 50, 0.6);
            border-radius: 15px;
            margin-bottom: 30px;
        }
        
        .settings-title {
            font-size: 1.8rem;
            margin: 0 0 25px 0;
            color: #ff9800;
            text-align: center;
            position: relative;
            display: inline-block;
            left: 50%;
            transform: translateX(-50%);
            padding: 0 20px;
        }
        
        .settings-title::after {
            content: "";
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 100%;
            height: 3px;
            background: linear-gradient(to right, transparent, #ff9800, transparent);
            border-radius: 2px;
        }
        
        .players-count {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .count-btn {
            padding: 14px 30px;
            font-size: 1.1rem;
            border-radius: 50px;
            background: linear-gradient(145deg, rgba(40, 40, 60, 0.7), rgba(25, 25, 40, 0.7));
            color: #ddd;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.05);
            position: relative;
            overflow: hidden;
            font-weight: 600;
        }
        
        .count-btn::before {
            content: "";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: 0.5s;
        }
        
        .count-btn:hover::before {
            left: 100%;
        }
        
        .count-btn.active {
            background: linear-gradient(to right, #9c27b0, #7b1fa2);
            color: white;
            box-shadow: 0 0 15px rgba(156, 39, 176, 0.5);
            transform: translateY(-3px);
        }
        
        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 20px;
        }
        
        .setting-group {
            background: linear-gradient(145deg, rgba(30, 30, 50, 0.8), rgba(20, 20, 35, 0.8));
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
            border: 1px solid rgba(255, 255, 255, 0.05);
            transition: transform 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .setting-group:hover {
            transform: translateY(-5px);
        }
        
        .setting-group::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 5px;
            height: 100%;
            background: linear-gradient(to bottom, #d32f2f, #9c27b0);
        }
        
        h3 {
            margin-top: 0;
            color: #ff9800;
            font-size: 1.4rem;
            margin-bottom: 20px;
            position: relative;
            padding-bottom: 10px;
        }
        
        h3::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            width: 50px;
            height: 2px;
            background: #d32f2f;
            border-radius: 1px;
        }
        
        .role-control {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 8px;
            margin: 12px 0;
            transition: all 0.2s ease;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .role-control:hover {
            background: rgba(211, 47, 47, 0.1);
            transform: translateX(5px);
        }
        
        .role-name {
            font-weight: 600;
            color: #e0e0e0;
        }
        
        input[type="number"] {
            width: 70px;
            padding: 10px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid #d32f2f;
            color: white;
            border-radius: 8px;
            font-size: 1rem;
            text-align: center;
        }
        
        input[type="checkbox"] {
            position: relative;
            width: 45px;
            height: 24px;
            -webkit-appearance: none;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            outline: none;
            cursor: pointer;
            transition: .5s;
        }
        
        input[type="checkbox"]:checked {
            background: #d32f2f;
        }
        
        input[type="checkbox"]::before {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            top: 1px;
            left: 2px;
            background: #ddd;
            transition: .5s;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
        }
        
        input[type="checkbox"]:checked::before {
            left: 22px;
            background: #fff;
        }
        
        .buttons {
            display: flex;
            justify-content: center;
            gap: 25px;
            margin: 30px 0;
        }
        
        button {
            padding: 16px 40px;
            font-size: 1.2rem;
            font-weight: bold;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        button::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: 0.5s;
        }
        
        button:hover::before {
            left: 100%;
        }
        
        button:hover {
            transform: translateY(-5px) scale(1.05);
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.4);
        }
        
        button:active {
            transform: translateY(2px);
        }
        
        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        #randomizeBtn {
            background: linear-gradient(135deg, #d32f2f, #b71c1c);
            color: white;
        }
        
        #startGameBtn {
            background: linear-gradient(135deg, #4CAF50, #2E7D32);
            color: white;
        }
        
        #resetGameBtn {
            background: linear-gradient(135deg, #2196F3, #0D47A1);
            color: white;
        }
        
        #randomizeBtn.animated {
            animation: pulse 1s;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .roles-display {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 20px;
            margin: 40px 0;
            padding: 0 20px;
        }
        
        .player-card {
            background: linear-gradient(145deg, rgba(44, 62, 80, 0.8), rgba(33, 47, 60, 0.8));
            border-radius: 15px;
            padding: 25px 15px;
            text-align: center;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            transition: all 0.4s ease;
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .player-card::before {
            content: "";
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            transform: rotate(30deg);
        }
        
        .player-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4);
        }
        
        .player-card.dead {
            background: linear-gradient(145deg, rgba(50, 50, 50, 0.7), rgba(30, 30, 30, 0.7));
            opacity: 0.6;
        }
        
        .player-number {
            font-size: 2.2rem;
            font-weight: bold;
            color: #ff9800;
            margin: 0;
            text-shadow: 0 0 10px rgba(255, 152, 0, 0.3);
        }
        
        .player-role {
            font-size: 1.2rem;
            min-height: 40px;
            margin: 15px 0 0;
            font-weight: 500;
            color: #e0e0e0;
        }
        
        .game-controls {
            display: flex;
            justify-content: center;
            gap: 25px;
            margin: 30px 0;
            padding: 0 20px;
        }
        
        .game-interface {
            padding: 30px;
            display: none;
            position: relative;
        }
        
        /* Плавающий таймер */
        .floating-timer {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(30, 30, 50, 0.95);
            border-radius: 15px;
            padding: 15px 25px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);
            border: 1px solid rgba(255, 255, 255, 0.1);
            z-index: 100;
            display: flex;
            align-items: center;
            gap: 20px;
        }
        
        .timer-display {
            font-size: 2.5rem;
            font-weight: bold;
            color: #ff9800;
            text-shadow: 0 0 10px rgba(255, 152, 0, 0.3);
            font-family: 'Courier New', monospace;
            min-width: 120px;
            text-align: center;
        }
        
        .timer-controls {
            display: flex;
            gap: 10px;
        }
        
        .timer-btn {
            padding: 10px 15px;
            font-size: 1rem;
            border-radius: 50px;
            background: linear-gradient(135deg, #2196F3, #1976D2);
            color: white;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .timer-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.4);
        }
        
        .timer-btn:active {
            transform: translateY(1px);
        }
        
        .timer-btn.stop {
            background: linear-gradient(135deg, #f44336, #d32f2f);
        }
        
        .timer-btn.reset {
            background: linear-gradient(135deg, #9e9e9e, #616161);
        }
        
        .timer-btn.add-time {
            background: linear-gradient(135deg, #4CAF50, #2E7D32);
        }
        
        .timer-btn.short {
            background: linear-gradient(135deg, #9c27b0, #7b1fa2);
        }
        
        /* Шторки для живых игроков и журнала */
        .drawer {
            position: fixed;
            top: 0;
            height: 100vh;
            width: 320px;
            background: rgba(18, 18, 30, 0.95);
            backdrop-filter: blur(10px);
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.7);
            z-index: 200;
            transition: transform 0.4s ease;
            padding: 20px;
            overflow: auto;
            -ms-overflow-style: none;
            scrollbar-width: none;
        }

        .drawer::-webkit-scrollbar {
            display: none; /* Chrome, Safari, Opera */
        }
        
        .drawer-left {
            left: 0;
            transform: translateX(-100%);
            border-right: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .drawer-right {
            right: 0;
            transform: translateX(100%);
            border-left: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .drawer.open {
            transform: translateX(0);
        }
        
        .drawer-toggle {
            position: fixed;
            top: 50%;
            transform: translateY(-50%);
            z-index: 199;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .drawer-toggle-left {
            left: 20px;
            background: linear-gradient(135deg, #4CAF50, #2E7D32);
            color: white;
        }

        .drawer-toggle-left.open {
            left: 295px;
        }
        
        .drawer-toggle-right {
            right: 20px;
            background: linear-gradient(135deg, #9c27b0, #7b1fa2);
            color: white;
        }

        .drawer-toggle-right.open {
            right: 295px;
        }
        
        .drawer h3 {
            text-align: center;
            margin-top: 0;
            margin-bottom: 20px;
            color: #ff9800;
            font-size: 1.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .close-drawer {
            background: #d32f2f;
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        /* Стили для живых игроков в шторке */
        #alivePlayersContainer {
            display: grid;
            gap: 15px;
        }
        
        .alive-player-card {
            background: linear-gradient(145deg, rgba(44, 62, 80, 0.8), rgba(33, 47, 60, 0.8));
            border-radius: 10px;
            padding: 10px 30px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .alive-player-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.4);
        }
        
        .alive-player-number {
            font-size: 1.8rem;
            font-weight: bold;
            color: #ff9800;
            margin: 0;
        }
        
        .alive-player-role {
            font-size: 1rem;
            opacity: 0.9;
            margin-top: 5px;
        }
        
        /* Стили для журнала игры */
        .log-content {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .log-entry {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            padding: 15px;
            border-left: 4px solid #ff9800;
            transition: all 0.3s ease;
        }
        
        .log-entry:hover {
            background: rgba(255, 255, 255, 0.08);
            transform: translateX(5px);
        }
        
        .log-timestamp {
            font-size: 0.85rem;
            color: #aaa;
            margin-bottom: 5px;
        }
        
        .log-message {
            font-size: 1rem;
            line-height: 1.5;
        }
        
        /* Управление игроками в один ряд */
        .player-control-row {
            display: flex;
            align-items: center;
            background: linear-gradient(145deg, rgba(44, 62, 80, 0.8), rgba(33, 47, 60, 0.8));
            border-radius: 15px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.05);
            transition: all 0.3s ease;
        }
        
        .player-control-row.dead {
            background: linear-gradient(145deg, rgba(50, 50, 50, 0.7), rgba(30, 30, 30, 0.7));
            opacity: 0.7;
        }
        
        .player-control-row:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.4);
        }
        
        .player-info {
            flex: 0 0 200px;
            text-align: center;
            padding: 0 15px;
            border-right: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .player-name {
            font-size: 1.4rem;
            font-weight: bold;
            color: #ff9800;
        }
        
        .player-role-info {
            font-size: 1.1rem;
            opacity: 0.8;
        }
        
        .controls-section {
            flex: 1;
            padding: 0 15px;
        }
        
        .controls-section h4 {
            font-size: 1rem;
            color: #ff9800;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .controls-grid {
            display: flex;
            gap: 10px;
        }
        
        .control-cell {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid #d32f2f;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: bold;
            font-size: 15px;
            white-space: nowrap;
        }
        
        .control-cell:hover {
            background: rgba(211, 47, 47, 0.2);
        }
        
        .control-cell.active {
            background: #d32f2f;
            color: white;
            box-shadow: 0 0 10px rgba(211, 47, 47, 0.5);
        }
        
        .timer-cell {
            width: auto;
            padding: 0 15px;
            background: rgba(33, 150, 243, 0.1);
            border-color: #2196F3;
        }
        
        .timer-cell:hover {
            background: rgba(33, 150, 243, 0.2);
        }
        
        .timer-cell.active {
            background: #2196F3;
        }
        
        .kill-btn {
            padding: 12px 20px;
            background: linear-gradient(135deg, #f44336, #d32f2f);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
            display: flex;
            font-size: 13px;
            justify-content: center;
            align-items: center;
            gap: 8px;
        }
        
        .kill-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(244, 67, 54, 0.4);
        }
        
        .kill-btn:active {
            transform: translateY(1px);
        }
        
        /* Плавающие уведомления о победе */

        .victory-messages {
            width: 100%; height: 100%;
            display: none;
            place-items: center;
            z-index: 100000;
            position: fixed;
        }

        .victory-message {
            background: linear-gradient(135deg, rgba(26, 26, 40, 0.95), rgba(40, 40, 60, 0.95));
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 0 50px rgba(0, 0, 0, 0.8);
            animation: pulse 3s infinite;
            display: none;
            width: 90%;
            max-width: 600px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .victory-message h2 {
            font-size: 3.5rem;
            margin: 0;
            background: linear-gradient(to right, #ffcc00, #ff9800);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 20px rgba(255, 204, 0, 0.5);
        }
        
        .victory-message p {
            font-size: 1.6rem;
            margin: 25px 0 35px;
            color: #ddd;
        }
        
        .victory-message button {
            background: linear-gradient(to right, #ff9800, #ff5722);
            font-size: 1.3rem;
            padding: 15px 40px;
            margin-top: 15px;
            margin-left: auto;
            margin-right: auto;
        }
        
        footer {
            text-align: center;
            padding: 30px;
            margin-top: 20px;
            font-size: 1rem;
            color: #777;
        }
        
        /* Анимация фона */
        @keyframes backgroundAnimation {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        body {
            background-size: 400% 400%;
            animation: backgroundAnimation 20s ease infinite;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        /* Адаптивные стили */
        @media (max-width: 1200px) {
            .player-control-row {
                flex-direction: column;
                text-align: center;
            }
            
            .player-info {
                border-right: none;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                padding-bottom: 15px;
                margin-bottom: 15px;
                flex: 1;
                width: 100%;
            }
            
            .controls-section {
                width: 100%;
                margin-bottom: 15px;
            }
        }
        
        @media (max-width: 768px) {
            .settings-grid {
                grid-template-columns: 1fr;
            }
            
            .roles-display {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .game-controls {
                flex-direction: column;
                align-items: center;
            }
            
            .victory-message {
                padding: 25px;
            }
            
            .victory-message h2 {
                font-size: 2.5rem;
            }
            
            .victory-message p {
                font-size: 1.2rem;
            }
            
            .floating-timer {
                flex-direction: column;
                width: 90%;
                padding: 15px;
            }
            
            .timer-controls {
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .drawer {
                width: 90%;
            }
        }

        /* Кнопка скачивания */
        .download-btn {
            background: linear-gradient(135deg, #2196F3, #0D47A1);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 8px 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 15px;
            margin-bottom: 15px;
            width: 100%;
            justify-content: center;
        }
        
        .download-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(33, 150, 243, 0.4);
        }
    </style>
</head>
<body>
    <!-- Плавающий таймер -->
    <div class="floating-timer" id="floatingTimer" style="display: none;">
        <div class="timer-display" id="timerDisplay">01:00</div>
        <div class="timer-controls">
            <button class="timer-btn" id="startStopBtn"><i class="fas fa-play"></i> Старт</button>
            <button class="timer-btn reset" id="resetBtn"><i class="fas fa-undo"></i> Сбросить</button>
            <button class="timer-btn add-time" id="add30Btn"><i class="fas fa-plus"></i> +30 сек</button>
            <button class="timer-btn short" id="set30Btn"><i class="fas fa-hourglass-half"></i> 30 сек</button>
        </div>
    </div>
    
    <!-- Шторка для живых игроков -->
    <div class="drawer drawer-left" id="playersDrawer">
        <h3>
            <i class="fas fa-heartbeat"></i> Живые игроки
        </h3>
        <div id="alivePlayersContainer"></div>
    </div>
    
    <!-- Шторка для журнала игры -->
    <div class="drawer drawer-right" id="logDrawer">
        
        <h3>
            <i class="fas fa-scroll"></i> Журнал игры
        </h3>
        <button class="download-btn" id="downloadLogBtn">
            <i class="fas fa-download"></i> Скачать журнал
        </button>
        <div class="log-content" id="logContent"></div>
    </div>
    
    <!-- Кнопки для открытия шторок -->
    <div class="drawer-toggle drawer-toggle-left" id="togglePlayersDrawer">
        <i class="fas fa-users"></i>
    </div>
    
    <div class="drawer-toggle drawer-toggle-right" id="toggleLogDrawer">
        <i class="fas fa-book"></i>
    </div>
    
    <!-- Плавающие уведомления о победе -->
    <div class="victory-messages">
        <div class="victory-message" id="mafiaVictoryMessage">
            <h2>ПОБЕДА МАФИИ!</h2>
            <p>Количество мафии и мирных игроков стало равным</p>
            <button id="closeMafiaVictoryBtn"><i class="fas fa-times"></i> Продолжить игру</button>
        </div>
        
        <div class="victory-message" id="civiliansVictoryMessage">
            <h2>ПОБЕДА МИРНЫХ!</h2>
            <p>Все мафиози (включая дона) уничтожены</p>
            <button id="closeCiviliansVictoryBtn"><i class="fas fa-times"></i> Продолжить игру</button>
        </div>
    </div>

    <div class="container">
        <header>
            <h1><i class="fas fa-user-secret"></i> Мафия</h1>
            <div class="subtitle">Премиум версия для идеальных игровых вечеров</div>
        </header>
        
        <div class="game-setup">
            <h2 class="settings-title"><i class="fas fa-cog"></i> Настройка игры</h2>
            
            <div class="players-count">
                <button class="count-btn active" data-count="10"><i class="fas fa-users"></i> 10 игроков</button>
                <button class="count-btn" data-count="12"><i class="fas fa-users"></i> 12 игроков</button>
            </div>
            
            <div class="settings-grid">
                <div class="setting-group">
                    <h3><i class="fas fa-star"></i> Основные роли</h3>
                    <div class="role-control">
                        <div>
                            <span class="role-name"><i class="fas fa-mask"></i> Мафия</span>
                        </div>
                        <span>2</span>
                    </div>
                    <div class="role-control">
                        <div>
                            <span class="role-name"><i class="fas fa-crown"></i> Дон</span>
                        </div>
                        <span>1</span>
                    </div>
                    <div class="role-control">
                        <div>
                            <span class="role-name"><i class="fas fa-search"></i> Комиссар</span>
                        </div>
                        <span>1</span>
                    </div>
                    <div class="role-control">
                        <div>
                            <span class="role-name"><i class="fas fa-user-friends"></i> Мирные жители</span>
                        </div>
                        <span id="civiliansCount">6</span>
                    </div>
                </div>
                
                <div class="setting-group">
                    <h3><i class="fas fa-plus-circle"></i> Дополнительные роли</h3>
                    <div class="role-control">
                        <span class="role-name"><i class="fas fa-heartbeat"></i> Доктор</span>
                        <input type="checkbox" id="doctorCheckbox" checked>
                    </div>
                    <div class="role-control">
                        <span class="role-name"><i class="fas fa-skull"></i> Маньяк</span>
                        <input type="checkbox" id="maniacCheckbox">
                    </div>
                    <div class="role-control">
                        <span class="role-name"><i class="fas fa-heart"></i> Любовница</span>
                        <input type="checkbox" id="loverCheckbox">
                    </div>
                </div>
            </div>
        </div>
        
        <div class="buttons">
            <button id="randomizeBtn"><i class="fas fa-random"></i> Рандомить</button>
        </div>
        
        <div id="rolesResult">
            <div class="roles-display" id="playersContainer"></div>
            <div class="game-controls">
                <button id="startGameBtn"><i class="fas fa-play"></i> Начать игру</button>
                <button id="resetGameBtn"><i class="fas fa-redo"></i> Сброс</button>
            </div>
        </div>
        
        <div class="game-interface" id="gameInterface">
            <!-- Управление игроками в ряды -->
            <div class="game-section">
                <h3><i class="fas fa-user-cog"></i> Управление игроками</h3>
                <div id="playersControlContainer"></div>
            </div>
        </div>
        
        <footer>
            <p>Программа для игры в Мафию | Премиум версия</p>
            <p>Сделано с любовью к классической игре</p>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Элементы DOM
            const doctorCheckbox = document.getElementById('doctorCheckbox');
            const maniacCheckbox = document.getElementById('maniacCheckbox');
            const loverCheckbox = document.getElementById('loverCheckbox');
            const countButtons = document.querySelectorAll('.count-btn');
            const civiliansCountSpan = document.getElementById('civiliansCount');
            
            const randomizeBtn = document.getElementById('randomizeBtn');
            const startGameBtn = document.getElementById('startGameBtn');
            const resetGameBtn = document.getElementById('resetGameBtn');
            
            const playersContainer = document.getElementById('playersContainer');
            const gameInterface = document.getElementById('gameInterface');
            const playersControlContainer = document.getElementById('playersControlContainer');
            const alivePlayersContainer = document.getElementById('alivePlayersContainer');
            const logContent = document.getElementById('logContent');
            
            // Элементы таймера
            const floatingTimer = document.getElementById('floatingTimer');
            const timerDisplay = document.getElementById('timerDisplay');
            const startStopBtn = document.getElementById('startStopBtn');
            const resetBtn = document.getElementById('resetBtn');
            const add30Btn = document.getElementById('add30Btn');
            const set30Btn = document.getElementById('set30Btn');
            
            // Элементы победы
            const mafiaVictoryMessage = document.getElementById('mafiaVictoryMessage');
            const civiliansVictoryMessage = document.getElementById('civiliansVictoryMessage');
            const closeMafiaVictoryBtn = document.getElementById('closeMafiaVictoryBtn');
            const closeCiviliansVictoryBtn = document.getElementById('closeCiviliansVictoryBtn');
            
            // Шторки
            const playersDrawer = document.getElementById('playersDrawer');
            const logDrawer = document.getElementById('logDrawer');
            const togglePlayersDrawer = document.getElementById('togglePlayersDrawer');
            const toggleLogDrawer = document.getElementById('toggleLogDrawer');
            const downloadLogBtn = document.getElementById('downloadLogBtn');
            
            downloadLogBtn.addEventListener('click', downloadLog);

            function downloadLog() {
                let logText = "Журнал игры Мафия\n\n";
                gameLog.forEach(entry => {
                    logText += `[${entry.timestamp}] ${entry.message}\n`;
                });
                
                const blob = new Blob([logText], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = `мафия_журнал_${new Date().toISOString().replace(/[:.]/g, '-')}.txt`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }

            // Игровые данные
            let players = [];
            let roles = [];
            let totalPlayers = 10;
            let deadPlayers = [];
            let timerInterval;
            let timerRunning = false;
            let seconds = 60;
            let gameLog = [];
            let playerPenalties = [];
            let gameStarted = false;

            // Функция добавления записи в лог
            function addLogEntry(message) {
                const now = new Date();
                const timestamp = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
                
                const entry = {
                    timestamp,
                    message
                };
                
                gameLog.unshift(entry);
                updateLogDisplay();
                
                // Автопрокрутка к последней записи
                logContent.scrollTop = logContent.scrollHeight;
            }
            
            // Обновление отображения лога
            function updateLogDisplay() {
                logContent.innerHTML = '';
                
                gameLog.forEach(entry => {
                    const logEntry = document.createElement('div');
                    logEntry.className = 'log-entry';
                    logEntry.innerHTML = `
                        <div class="log-timestamp">${entry.timestamp}</div>
                        <div class="log-message">${entry.message}</div>
                    `;
                    logContent.appendChild(logEntry);
                });
            }
            
            // Обновление количества мирных жителей
            function updateCiviliansCount() {
                let fixedRoles = 4;
                if (doctorCheckbox.checked) fixedRoles++;
                if (maniacCheckbox.checked) fixedRoles++;
                if (loverCheckbox.checked) fixedRoles++;
                
                const civilians = totalPlayers - fixedRoles;
                civiliansCountSpan.textContent = civilians;
            }


            // Инициализация
            updateCiviliansCount();
            doctorCheckbox.addEventListener('change', function() {
                updateCiviliansCount();
                addLogEntry('Роль Доктора ' + (this.checked ? 'добавлена' : 'убрана'));
            });
            maniacCheckbox.addEventListener('change', function() {
                updateCiviliansCount();
                addLogEntry('Роль Маньяка ' + (this.checked ? 'добавлена' : 'убрана'));
            });
            loverCheckbox.addEventListener('change', function() {
                updateCiviliansCount();
                addLogEntry('Роль Любовницы ' + (this.checked ? 'добавлена' : 'убрана'));
            });

            // Установка количества игроков
            countButtons.forEach(btn => {
                btn.addEventListener('click', function() {
                    countButtons.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    totalPlayers = parseInt(this.dataset.count);
                    
                    updateCiviliansCount();
                    generateRoles();
                    displayPlayers();
                    
                    addLogEntry(`Количество игроков изменено на ${totalPlayers}`);
                });
            });

            // Генерация ролей
            function generateRoles() {
                const doctor = doctorCheckbox.checked;
                const maniac = maniacCheckbox.checked;
                const lover = loverCheckbox.checked;
                
                roles = ['Дон', 'Мафия', 'Мафия', 'Комиссар'];
                if (doctor) roles.push('Доктор');
                if (maniac) roles.push('Маньяк');
                if (lover) roles.push('Любовница');
                
                while (roles.length < totalPlayers) {
                    roles.push('Мирный житель');
                }
                
                shuffleArray(roles);
                
                playerPenalties = Array(totalPlayers).fill().map(() => ({
                    fouls: 0,
                    warnings: 0,
                    timeAdded: false
                }));
                
                return roles;
            }
            
            // Функция перемешивания массива
            function shuffleArray(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
            }
            
            // Отображение игроков с ролями
            function displayPlayers() {
                playersContainer.innerHTML = '';
                
                for (let i = 0; i < totalPlayers; i++) {
                    const playerCard = document.createElement('div');
                    playerCard.className = 'player-card';
                    if (deadPlayers.includes(i)) {
                        playerCard.classList.add('dead');
                    }
                    playerCard.dataset.player = i;
                    
                    playerCard.innerHTML = `
                        <div class="player-number">${i+1}</div>
                        <div class="player-role">${roles[i]}</div>
                    `;
                    
                    playersContainer.appendChild(playerCard);
                }
                
                updateAlivePlayers();
            }
            
            // Обновление панели живых игроков
            function updateAlivePlayers() {
                alivePlayersContainer.innerHTML = '';
                
                for (let i = 0; i < totalPlayers; i++) {
                    if (deadPlayers.includes(i)) continue;
                    
                    const playerCard = document.createElement('div');
                    playerCard.className = 'alive-player-card';
                    playerCard.dataset.player = i;
                    
                    playerCard.innerHTML = `
                        <div class="alive-player-number">${i+1}</div>
                        <div class="alive-player-role">${roles[i]}</div>
                    `;
                    
                    alivePlayersContainer.appendChild(playerCard);
                }
            }
            
            // Проверка на победу мафии
            function checkMafiaVictory() {
                let mafiaAlive = 0;
                let civiliansAlive = 0;
                
                for (let i = 0; i < totalPlayers; i++) {
                    if (deadPlayers.includes(i)) continue;
                    
                    if (roles[i] === 'Дон' || roles[i] === 'Мафия') {
                        mafiaAlive++;
                    } else {
                        civiliansAlive++;
                    }
                }
                
                return mafiaAlive > 0 && mafiaAlive >= civiliansAlive;
            }
            
            // Проверка на победу мирных
            function checkCiviliansVictory() {
                for (let i = 0; i < totalPlayers; i++) {
                    if (deadPlayers.includes(i)) continue;
                    
                    if (roles[i] === 'Дон' || roles[i] === 'Мафия') {
                        return false;
                    }
                }
                return true;
            }
            
            // Создание игрового интерфейса
            function createGameInterface() {
                playersControlContainer.innerHTML = '';
                
                for (let i = 0; i < totalPlayers; i++) {
                    const penalties = playerPenalties[i];
                    
                    const playerControl = document.createElement('div');
                    playerControl.className = 'player-control-row';
                    if (deadPlayers.includes(i)) {
                        playerControl.classList.add('dead');
                    }
                    playerControl.dataset.player = i;
                    
                    playerControl.innerHTML = `
                        <div class="player-info">
                            <div class="player-name">Игрок ${i+1}</div>
                            <div class="player-role-info">${roles[i]}</div>
                        </div>
                        
                        <div class="controls-section">
                            <h4><i class="fas fa-exclamation-circle"></i> Фолы</h4>
                            <div class="controls-grid">
                                <div class="control-cell ${penalties.fouls >= 1 ? 'active' : ''}" data-player="${i}" data-type="foul">1</div>
                                <div class="control-cell ${penalties.fouls >= 2 ? 'active' : ''}" data-player="${i}" data-type="foul">2</div>
                                <div class="control-cell ${penalties.fouls >= 3 ? 'active' : ''}" data-player="${i}" data-type="foul">3</div>
                                <div class="control-cell ${penalties.fouls >= 4 ? 'active' : ''}" data-player="${i}" data-type="foul">4</div>
                            </div>
                        </div>
                        
                        <div class="controls-section">
                            <h4><i class="fas fa-exclamation-triangle"></i> Предупреждения</h4>
                            <div class="controls-grid">
                                <div class="control-cell ${penalties.warnings >= 1 ? 'active' : ''}" data-player="${i}" data-type="warning">1</div>
                                <div class="control-cell ${penalties.warnings >= 2 ? 'active' : ''}" data-player="${i}" data-type="warning">2</div>
                            </div>
                        </div>
                        
                        <div class="controls-section">
                            <h4><i class="fas fa-clock"></i> Время</h4>
                            <div class="controls-grid">
                                <div class="control-cell timer-cell ${penalties.timeAdded ? 'active' : ''}" data-player="${i}" data-type="timer2"><i class="fas fa-plus"></i> 30 сек</div>
                            </div>
                        </div>
                        
                        <button class="kill-btn" data-player="${i}">
                            <i class="fas fa-skull"></i> ${deadPlayers.includes(i) ? 'Воскресить' : 'Убить'}
                        </button>
                    `;
                    
                    playersControlContainer.appendChild(playerControl);
                }
                
                // Обработчики событий для элементов управления
                const controlCells = document.querySelectorAll('.control-cell');
                controlCells.forEach(cell => {
                    cell.addEventListener('click', function() {
                        const playerControl = this.closest('.player-control-row');
                        if (playerControl.classList.contains('dead')) return;
                        
                        const playerIndex = parseInt(this.dataset.player);
                        const actionType = this.dataset.type;
                        const penalties = playerPenalties[playerIndex];
                        
                        if (actionType === 'foul') {
                            if (this.classList.contains('active')) {
                                penalties.fouls = Math.max(0, penalties.fouls - 1);
                            } else {
                                penalties.fouls = Math.min(4, penalties.fouls + 1);
                            }
                            addLogEntry(`Игрок ${playerIndex+1}: ${penalties.fouls} фолов`);
                        }
                        else if (actionType === 'warning') {
                            if (this.classList.contains('active')) {
                                penalties.warnings = Math.max(0, penalties.warnings - 1);
                            } else {
                                penalties.warnings = Math.min(2, penalties.warnings + 1);
                            }
                            addLogEntry(`Игрок ${playerIndex+1}: ${penalties.warnings} предупреждений`);
                        }
                        else if (actionType === 'timer') {
                            penalties.timeAdded = !penalties.timeAdded;
                            if (penalties.timeAdded) {
                                addTime();
                                addLogEntry(`Игрок ${playerIndex+1} получил +30 секунд`);
                            }
                        } else if (actionType == 'timer2') {
                            penalties.timeAdded = !penalties.timeAdded;
                            if (penalties.timeAdded) {
                                addLogEntry(`Игрок ${playerIndex+1} получил +30 секунд`);
                            }
                        }
                        
                        createGameInterface();
                    });
                });
                
                // Обработчики для кнопок убит
                const killButtons = document.querySelectorAll('.kill-btn');
                killButtons.forEach(btn => {
                    btn.addEventListener('click', function() {
                        const playerIndex = parseInt(this.dataset.player);
                        
                        if (deadPlayers.includes(playerIndex)) {
                            deadPlayers = deadPlayers.filter(p => p !== playerIndex);
                            addLogEntry(`Игрок ${playerIndex+1} воскрешен`);
                        } else {
                            deadPlayers.push(playerIndex);
                            addLogEntry(`Игрок ${playerIndex+1} убит (Роль: ${roles[playerIndex]})`);
                        }
                        
                        updateAlivePlayers();
                        createGameInterface();
                        
                        if (checkCiviliansVictory()) {
                            civiliansVictoryMessage.style.display = 'block';
                            document.querySelector('.victory-messages').style.display = 'grid';
                            addLogEntry('ПОБЕДА МИРНЫХ ЖИТЕЛЕЙ!');
                        } else if (checkMafiaVictory()) {
                            mafiaVictoryMessage.style.display = 'block';
                            document.querySelector('.victory-messages').style.display = 'grid';
                            addLogEntry('ПОБЕДА МАФИИ!');
                        }
                    });
                });
            }
            
            // Функция сброса игры
            function resetGame() {
                // Очищаем список убитых
                deadPlayers = [];
                
                // Сбрасываем таймер
                resetTimer();
                
                // Сбрасываем штрафы
                playerPenalties = Array(totalPlayers).fill().map(() => ({
                    fouls: 0,
                    warnings: 0,
                    timeAdded: false
                }));
                
                // Разблокируем кнопку рандомизации
                randomizeBtn.disabled = false;
                gameStarted = false;
                
                // Обновляем отображение игроков
                displayPlayers();
                
                // Пересоздаем игровой интерфейс
                if (gameInterface.style.display === 'block') {
                    createGameInterface();
                }
                document.getElementById('gameInterface').style.display = 'none'
                addLogEntry('Игра сброшена. Все игроки оживлены, заметки очищены.');
            }
            
            // Функции для работы с таймером
            function updateTimerDisplay() {
                const minutes = Math.floor(seconds / 60);
                const secs = seconds % 60;
                timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
                
                if (seconds <= 10) {
                    timerDisplay.style.color = '#f44336';
                } else if (seconds <= 30) {
                    timerDisplay.style.color = '#ff5722';
                } else {
                    timerDisplay.style.color = '#ff9800';
                }
            }
            
            function startTimer() {
                if (timerRunning) return;
                
                timerRunning = true;
                startStopBtn.innerHTML = '<i class="fas fa-pause"></i> Пауза';
                startStopBtn.classList.add('stop');
                addLogEntry('Таймер запущен');
                
                timerInterval = setInterval(() => {
                    seconds--;
                    updateTimerDisplay();
                    
                    if (seconds <= 0) {
                        clearInterval(timerInterval);
                        timerRunning = false;
                        timerDisplay.textContent = "00:00";
                        timerDisplay.style.color = '#f44336';
                        startStopBtn.innerHTML = '<i class="fas fa-play"></i> Старт';
                        startStopBtn.classList.remove('stop');
                        addLogEntry('Время вышло!');
                    }
                }, 1000);
            }
            
            function stopTimer() {
                clearInterval(timerInterval);
                timerRunning = false;
                startStopBtn.innerHTML = '<i class="fas fa-play"></i> Старт';
                startStopBtn.classList.remove('stop');
                addLogEntry('Таймер остановлен');
            }
            
            function resetTimer() {
                stopTimer();
                seconds = 60;
                updateTimerDisplay();
                addLogEntry('Таймер сброшен на 60 секунд');
            }
            
            function addTime() {
                seconds += 30;
                updateTimerDisplay();
                addLogEntry('Добавлено 30 секунд к таймеру');
            }
            
            function set30Seconds() {
                stopTimer();
                seconds = 30;
                updateTimerDisplay();
                addLogEntry('Таймер установлен на 30 секунд');
            }
            
            // Инициализация таймера
            updateTimerDisplay();
            
            // Обработчики событий таймера
            startStopBtn.addEventListener('click', function() {
                if (timerRunning) {
                    stopTimer();
                } else {
                    startTimer();
                }
            });
            
            resetBtn.addEventListener('click', resetTimer);
            add30Btn.addEventListener('click', addTime);
            set30Btn.addEventListener('click', set30Seconds);
            
            // Обработчики шторок
            togglePlayersDrawer.addEventListener('click', function() {
                playersDrawer.classList.toggle('open');
                togglePlayersDrawer.classList.toggle('open')
            });
            
            toggleLogDrawer.addEventListener('click', function() {
                logDrawer.classList.toggle('open');
                toggleLogDrawer.classList.toggle('open')
            });
            
            // Закрытие шторок при клике вне области
            document.addEventListener('click', function(event) {
                if (!playersDrawer.contains(event.target) && !togglePlayersDrawer.contains(event.target)) {
                    playersDrawer.classList.remove('open');
                    togglePlayersDrawer.classList.remove('open')
                }
                if (!logDrawer.contains(event.target) && !toggleLogDrawer.contains(event.target)) {
                    logDrawer.classList.remove('open');
                    toggleLogDrawer.classList.remove('open')
                }
            });
            
            // Обработчики событий
            randomizeBtn.addEventListener('click', function() {
                if (gameStarted) return;
                
                this.classList.add('animated');
                setTimeout(() => {
                    this.classList.remove('animated');
                }, 1000);
                
                deadPlayers = [];
                generateRoles();
                displayPlayers();
                
                addLogEntry('Роли зарандомилены заново');
            });
            
            startGameBtn.addEventListener('click', function() {
                gameStarted = true;
                randomizeBtn.disabled = true;
                
                gameInterface.style.display = 'block';
                floatingTimer.style.display = 'flex';
                createGameInterface();
                document.getElementById('gameInterface').scrollIntoView({ behavior: 'smooth' });
                
                addLogEntry('Игра начата!');
                addLogEntry('Роли распределены случайным образом');
            });
            
            // Обработчик кнопки сброса
            resetGameBtn.addEventListener('click', resetGame);
            
            // Закрытие сообщений о победе
            closeMafiaVictoryBtn.addEventListener('click', function() {
                mafiaVictoryMessage.style.display = 'none';
                document.querySelector('.victory-messages').style.display = 'none'
            });
            
            closeCiviliansVictoryBtn.addEventListener('click', function() {
                civiliansVictoryMessage.style.display = 'none';
                document.querySelector('.victory-messages').style.display = 'none'
            });
            
            // Инициализация с рандомными ролями
            generateRoles();
            displayPlayers();
            
            // Добавляем начальную запись в лог
            addLogEntry('Добро пожаловать в игру Мафия!');
            addLogEntry('Настройте роли и нажмите "Рандомить" для распределения');
        });
    </script>
</body>
</html>
